---
title: "Longman Communication 3000 with Examples"
date: "2023-06-25"
categories: [writing, foundation, code]
format:
  html:
    code-fold: true
jupyter: python3
execute:
  echo: false
  freeze: auto
  cache: true
---

Longman Communication 3000 is a list of most frequently used words in spoken or written English.

> ... by knowing this list of words, a learner of English is in a position to understand
86% or more of what he or she reads.

Each word has one or two of the six frequency tags: S1, S2, S3, W1, W2, and W3. W3 indicates a word
is among the top 3000 most used words in written English, and S2 top 2000 spoken.

I have extracted the words from [this PDF file](longman3000.pdf), and enhanced them with example
sentences. By giving foundational examples, the hope is to enable non-native speakers, like myself,
to understand and use simple words.

Listed below are the 3000 words ordered alphabetically with their tags. Example sentences, synonyms,
and antonyms are also provided if there is any. Believing the synonyms and examples would be enough
to understand a word, I intentionally left out the formal definitions. Feel free to lookup, or just
read through them to see if you missed any!

- [a, b](#sec-ab)
- [c, d](#sec-cd)
- [e, f, g](#sec-efg)
- [h, i, j, k, l](#sec-hijkl)
- [m, n, o](#sec-mno)
- [p, q, r](#sec-pqr)
- [s, t, u, v](#sec-stuv)
- [w, y, z](#sec-wyz)


```{python}
#| echo: true
import pandas as pd

pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

def _extract_val(def_, key):
    if not def_:
        return None
    return def_[key] or None

lm3k = (
    pd.read_json('longman3000_sentences.json')
        .explode('defs').reset_index(drop=True)
        .assign(synonyms=lambda df: df.defs.apply(_extract_val, key='synonyms').str.join(', '),
                examples=lambda df: df.defs.apply(_extract_val, key='example'),
                freqs=lambda df: df.freqs.str.join(', '))
        .fillna('-')
        .rename(columns={'wtypes': 'class'})
        .rename(columns=lambda s: s.title())
)

def format_table(lm3k, initials):
    return (
        lm3k.loc[lm3k.Word.str.slice(0, 1).isin(initials),
                 ["Word", "Freqs", "Class", "Synonyms", "Examples"]]
            .set_index(["Word", "Freqs", "Class"]).sort_index(key=lambda s: s.str.lower())
            .style
            .set_table_styles([
                {'selector': 'td', 'props': [('text-align', 'left')]},
                {'selector': 'th', 'props': [('text-align', 'left')]},
            ])
            .set_table_styles({
                'Synonyms': [{'selector': 'td', 'props': [('width', '100px'), ('overflow', 'hidden')]}],
                'Examples': [{'selector': 'td', 'props': [('width', '500px'), ('overflow', 'hidden')]}],
            }, overwrite=False)
    )
```


## a, b {#sec-ab}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'a', 'b'}))
```


## c, d {#sec-cd}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'c', 'd'}))
```


## e, f, g {#sec-efg}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'e', 'f', 'g'}))
```


## h, i, j, k, l {#sec-hijkl}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'h', 'i', 'j', 'k', 'l'}))
```


## m, n, o {#sec-mno}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'m', 'n', 'o'}))
```


## p, q, r {#sec-pqr}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'p', 'q', 'r'}))
```


## s, t, u, v {#sec-stuv}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'s', 't', 'u', 'v'}))
```


## w, y, z {#sec-wyz}
```{python}
#| column: body-outset
import pandas as pd

display(format_table(lm3k, {'w', 'y', 'z'}))
```
